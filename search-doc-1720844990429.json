[{"title":"About","type":0,"sectionRef":"#","url":"/draggable/docs/intro","content":"About Welcome to the Draggable Module for Roblox! This module provides a seamless solution for implementing draggable functionality within your Roblox games and experiences. With the deprecation of the legacy property within GuiObjects, this module steps in to offer an efficient and reliable replacement, ensuring your GUI elements remain interactive and user-friendly.","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/draggable/docs/installation","content":"","keywords":""},{"title":"Github​","type":1,"pageTitle":"Installation","url":"/draggable/docs/installation#github","content":"By visiting the release page, you can download the .rbxm file there. "},{"title":"Roblox​","type":1,"pageTitle":"Installation","url":"/draggable/docs/installation#roblox","content":"You can add the module directly to your account with this link. "},{"title":"Wally​","type":1,"pageTitle":"Installation","url":"/draggable/docs/installation#wally","content":"Add the Draggable module to your wally.toml dependency list. Draggable = &quot;destinecarma/draggable@^1.0&quot;  Wally Not familiar with Wally? Wally is a package manager (like NPM) for the Roblox ecosystem. To get started, check out the Wally repository. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/draggable/docs/gettingStarted","content":"Getting Started To get started using the Draggable module, follow these simple steps: We first need to require the module: local Draggable = require(--[[ Path ]]) -- Example game.ReplciatedStorage.Draggable Create a Draggable Class for your GuiObject: local myFrame = script.Parent.Frame local draggableObject = Draggable.new(myFrame) important Make sure that the GuiObject's Interactable is set to true. The Draggable module does not work with any GuiButton. tip If the Draggable's GuiObject is being obstructed by a GuiObject Now your GuiObject is draggable! Once you have decided to stop the dragging capability, simply call the Destroy method on the class.","keywords":""},{"title":"Draggable","type":0,"sectionRef":"#","url":"/draggable/api/Draggable","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#properties","content":" "},{"title":"Enabled​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#Enabled","content":"&lt;/&gt; Draggable.Enabled: boolean Determines whether the GuiObject is Draggable.  "},{"title":"Dragging​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#Dragging","content":"&lt;/&gt; Draggable.Dragging: Signal This property allows you to make a connection with the Connect method. When the user is interacting with or dragging the Draggable GuiObject, this connection will be fired. See FastSignal for more information. local draggableObject = Draggable.new(exampleFrame) draggableObject.Dragging:Connect(function(mousePosition: Vector2) print(`Dragging: {mousePosition}`) end)   "},{"title":"Began​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#Began","content":"&lt;/&gt; Draggable.Began: Signal This property allows you to make a connection with the Connect method. When the user clicks or touches the Draggable GuiObject, this connection will be fired. See FastSignal for more information. local draggableObject = Draggable.new(exampleFrame) draggableObject.Began:Connect(function(mousePosition: Vector2) print(`Began: {mousePosition}`) end)   "},{"title":"Ended​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#Ended","content":"&lt;/&gt; Draggable.Ended: Signal This property allows you to make a connection with the Connect method. When the user stops interacting with or dragging the Draggable GuiObject, this connection will be fired. See FastSignal for more information. local draggableObject = Draggable.new(exampleFrame) draggableObject.Ended:Connect(function(mousePosition: Vector2) print(`Ended: {mousePosition}`) end)   "},{"title":"Boundary​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#Boundary","content":"since v1.1.0 &lt;/&gt; Draggable.Boundary: nil | GuiBase2d  This property can be nil or GuiBase2d. It determines the boundary of the Draggable GuiObject. "},{"title":"Functions​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#new","content":"&lt;/&gt; Draggable.new(guiObject: GuiObject ) → Draggable This function creates a Draggable object, which turns the GuiObject into a Draggable GuiObject.  "},{"title":"Destroy​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#Destroy","content":"&lt;/&gt; Draggable:Destroy() → () Removes the draggable capability from the associated GuiObject. Since v1.1.0, this function is automatically called when the GuiObject is destroyed.  "},{"title":"IncludeDescendants​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#IncludeDescendants","content":"&lt;/&gt; Draggable:IncludeDescendants() → () Allows the user to drag the Draggable GuiObject on its descendants.  "},{"title":"Include​","type":1,"pageTitle":"Draggable","url":"/draggable/api/Draggable#Include","content":"&lt;/&gt; Draggable:Include(guiObjects: {GuiObject }) → () This function works similarly to IncludeDescendants, but the developer can pass an array containing specific descendants of the GuiObject to be draggable. Example: local draggableObject = Draggable.new(exampleFrame) local list = [] -- Do not include TextButtons for i, guiObject in exampleFrame:GetDescendants() do if guiObject:IsA(&quot;TextButton&quot;) then continue end table.insert(list, guiObject) end draggableObject:Include(list) important Make sure that every element on the list is a GuiObject and that it is a descendant of the Draggable GuiObject. "}]